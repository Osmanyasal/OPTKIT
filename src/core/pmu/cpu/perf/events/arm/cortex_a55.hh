#pragma once
#include <cstdint>
namespace optkit::arm::cortex_a55{
	enum cortex_a55 : uint64_t {
		SW_INCR = 0x00, // Instruction architecturally executed
		L1I_CACHE_REFILL = 0x01, // Level 1 instruction cache refill
		L1I_TLB_REFILL = 0x02, // Level 1 instruction TLB refill
		L1D_CACHE_REFILL = 0x03, // Level 1 data cache refill
		L1D_CACHE = 0x04, // Level 1 data cache access
		L1D_TLB_REFILL = 0x05, // Level 1 data TLB refill
		LD_RETIRED = 0x06, // Instruction architecturally executed
		ST_RETIRED = 0x07, // Instruction architecturally executed
		INST_RETIRED = 0x08, // Instruction architecturally executed
		EXC_TAKEN = 0x09, // Exception taken
		EXC_RETURN = 0x0a, // Instruction architecturally executed
		CID_WRITE_RETIRED = 0x0b, // Instruction architecturally executed
		PC_WRITE_RETIRED = 0x0c, // Instruction architecturally executed
		BR_IMMED_RETIRED = 0x0d, // Instruction architecturally executed
		BR_RETURN_RETIRED = 0x0e, // Instruction architecturally executed
		UNALIGNED_LDST_RETIRED = 0x0f, // Instruction architecturally executed
		BR_MIS_PRED = 0x10, // Mispredicted or not predicted branch speculatively executed
		CPU_CYCLES = 0x11, // Cycle
		BR_PRED = 0x12, // Predictable branch speculatively executed
		MEM_ACCESS = 0x13, // Data memory access
		L1I_CACHE = 0x14, // Level 1 instruction cache access
		L1D_CACHE_WB = 0x15, // Level 1 data cache Write-Back
		L2D_CACHE = 0x16, // Level 2 data cache access
		L2D_CACHE_REFILL = 0x17, // Level 2 data cache refill
		L2D_CACHE_WB = 0x18, // Level 2 data cache Write-Back
		BUS_ACCESS = 0x19, // Bus access
		MEMORY_ERROR = 0x1a, // Local memory error
		INST_SPEC = 0x1b, // Operation speculatively executed
		INT_SPEC = 0x1b, // Operation speculatively executed
		TTBR_WRITE_RETIRED = 0x1c, // Instruction architecturally executed
		BUS_CYCLES = 0x1d, // Bus cycles
		L2D_CACHE_ALLOCATE = 0x20, // Level 2 data cache allocation without refill
		BR_RETIRED = 0x21, // Instruction architecturally executed
		BR_MIS_PRED_RETIRED = 0x22, // Instruction architecturally executed
		BR__MIS_PRED_RETIRED = 0x22, // Instruction architecturally executed
		STALL_FRONTEND = 0x23, // No operation issued because of the frontend
		STALL_BACKEND = 0x24, // No operation issued because of the backend
		L1D_TLB = 0x25, // Level 1 data TLB access
		L1I_TLB = 0x26, // Level 1 instruction TLB access
		L3D_CACHE_ALLOCATE = 0x29, // Attributable Level 3 unified cache allocation without refill
		L3D_CACHE_REFILL = 0x2a, // Attributable Level 3 unified cache refill
		L3D_CACHE = 0x2b, // Attributable Level 3 unified cache access
		L2D_TLB_REFILL = 0x2d, // Attributable Level 2 unified TLB refill
		L2D_TLB = 0x2f, // Attributable Level 2 unified TLB access
		DTLB_WALK = 0x34, // Access to data TLB that caused a page table walk
		ITLB_WALK = 0x35, // Access to instruction TLB that caused a page table walk
		LL_CACHE_RD = 0x36, // Last level cache access
		LL_CACHE_MISS_RD = 0x37, // Last level cache miss
		REMOTE_ACCESS_RD = 0x38, // Access to another socket in a multi-socket system
		L1D_CACHE_RD = 0x40, // Level 1 data cache access
		L1D_CACHE_WR = 0x41, // Level 1 data cache access
		L1D_CACHE_REFILL_RD = 0x42, // Level 1 data cache refill
		L1D_CACHE_REFILL_WR = 0x43, // Level 1 data cache refill
		L1D_CACHE_REFILL_INNER = 0x44, // Level 1 data cache refill
		L1D_CACHE_REFILL_OUTER = 0x45, // Level 1 data cache refill
		L2D_CACHE_RD = 0x50, // Level 2 cache access
		L2D_CACHE_WR = 0x51, // Level 2 cache access
		L2D_CACHE_REFILL_RD = 0x52, // Level 2 cache refill
		L2D_CACHE_REFILL_WR = 0x53, // Level 2 cache refill
		BUS_ACCESS_RD = 0x60, // Bus access
		BUS_ACCESS_WR = 0x61, // Bus access
		MEM_ACCESS_RD = 0x66, // Data memory access
		MEM_ACCESS_WR = 0x67, // Data memory access
		LD_SPEC = 0x70, // Operation speculatively executed
		ST_SPEC = 0x71, // Operation speculatively executed
		LDST_SPEC = 0x72, // Operation speculatively executed
		DP_SPEC = 0x73, // Operation speculatively executed
		ASE_SPEC = 0x74, // Operation speculatively executed
		VFP_SPEC = 0x75, // Operation speculatively executed
		PC_WRITE_SPEC = 0x76, // Operation speculatively executed
		CRYPTO_SPEC = 0x77, // Operation speculatively executed
		BR_IMMED_SPEC = 0x78, // Branch speculatively executed
		BR_RETURN_SPEC = 0x79, // Branch speculatively executed
		BR_INDIRECT_SPEC = 0x7a, // Branch speculatively executed
		EXC_IRQ = 0x86, // Exception taken
		EXC_FIQ = 0x87, // Exception taken
		L3D_CACHE_RD = 0xa0, // Attributable Level 3 unified cache access
		L3D_CACHE_REFILL_RD = 0xa2, // Attributable Level 3 unified cache refill
		L3D_CACHE_REFILL_PREFETCH = 0xc0, // Level 3 cache refill due to prefetch
		L2D_CACHE_REFILL_PREFETCH = 0xc1, // Level 2 cache refill due to prefetch
		L1D_CACHE_REFILL_PREFETCH = 0xc2, // Level 1 data cache refill due to prefetch
		L2D_WS_MODE = 0xc3, // Level 2 cache write streaming mode
		L1D_WS_MODE_ENTRY = 0xc4, // Level 1 data cache entering write streaming mode
		L1D_WS_MODE = 0xc5, // Level 1 data cache write streaming mode
		PREDECODE_ERROR = 0xc6, // Predecode error
		L3D_WS_MODE = 0xc7, // Level 3 cache write streaming mode
		BR_COND_PRED = 0xc9, // Predicted conditional branch executed
		BR_INDIRECT_MIS_PRED = 0xca, // Indirect branch mis-predicted
		BR_INDIRECT_ADDR_MIS_PRED = 0xcb, // Indirect branch mis-predicted due to address mis-compare
		BR_COND_MIS_PRED = 0xcc, // Conditional branch mis-predicted
		BR_INDIRECT_ADDR_PRED = 0xcd, // Indirect branch with predicted address executed
		BR_RETURN_ADDR_PRED = 0xce, // Procedure return with predicted address executed
		BR_RETURN_ADDR_MIS_PRED = 0xcf, // Procedure return mis-predicted due to address mis-compare
		L2D_LLWALK_TLB = 0xd0, // Level 2 TLB last-level walk cache access
		L2D_LLWALK_TLB_REFILL = 0xd1, // Level 2 TLB last-level walk cache refill
		L2D_L2WALK_TLB = 0xd2, // Level 2 TLB level-2 walk cache access
		L2D_L2WALK_TLB_REFILL = 0xd3, // Level 2 TLB level-2 walk cache refill
		L2D_S2_TLB = 0xd4, // Level 2 TLB IPA cache access
		L2D_S2_TLB_REFILL = 0xd5, // Level 2 TLB IPA cache refill
		L2D_CACHE_STASH_DROPPED = 0xd6, // Level 2 cache stash dropped
		STALL_FRONTEND_CACHE = 0xe1, // No operation issued due to the frontend
		STALL_FRONTEND_TLB = 0xe2, // No operation issued due to the frontend
		STALL_FRONTEND_PDERR = 0xe3, // No operation issued due to the frontend
		STALL_BACKEND_ILOCK = 0xe4, // No operation issued due to the backend interlock
		STALL_BACKEND_ILOCK_AGU = 0xe5, // No operation issued due to the backend
		STALL_BACKEND_ILOCK_FPU = 0xe6, // No operation issued due to the backend
		STALL_BACKEND_LD = 0xe7, // No operation issued due to the backend
		STALL_BACKEND_ST = 0xe8, // No operation issued due to the backend
		STALL_BACKEND_LD_CACHE = 0xe9, // No operation issued due to the backend
		STALL_BACKEND_LD_TLB = 0xea, // No operation issued due to the backend
		STALL_BACKEND_ST_STB = 0xeb, // No operation issued due to the backend
		STALL_BACKEND_ST_TLB = 0xec, // No operation issued due to the backend
		
	};
};

namespace cortex_a55 = optkit::arm::cortex_a55;

