#pragma once
#include <cstdint>
namespace optkit::amd64::fam1ah_zen5{
	enum fam1ah_zen5 : uint64_t {
		RETIRED_X87_FP_OPS = 0x2, // Number of X87 floating-point ops retired
		RETIRED_X87_FP_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_X87_FP_OPS__ADD_SUB_OPS = 0x01, // Number of add/subtract ops
		RETIRED_X87_FP_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_X87_FP_OPS__MUL_OPS = 0x2, // Number of multiply ops
		RETIRED_X87_FP_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_X87_FP_OPS__DIV_SQRT_OPS = 0x4, // Number of divide and square root ops
		RETIRED_SSE_AVX_FLOPS = 0x3, // This is a retire-based event. The number of retired SSE/AVX FLOPS. The number of events logged per cycle can vary from 0 to 64. This event can count above 15 and therefore requires the MergeEvent
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__ADD_SUB_FLOPS = 0x1, // Addition/subtraction FLOPS
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__MULT_FLOPS = 0x2, // Multiplication FLOPS
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__DIV_FLOPS = 0x4, // Division/Square-root FLOPS
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__MAC_FLOPS = 0x8, // Multiply-Accumulate flops. Each MAC operation is counted as 2 FLOPS. This event does not include bfloat MAC operations
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__ALL_TYPE = 0x0, // All types
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__FLOP_TYPE_BFLOAT16 = 0x20, // B Float 16
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__FLOP_TYPE_SCALAR_SINGLE = 0x40, // Scalar single
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__FLOP_TYPE_PACKED_SINGLE = 0x60, // Packed single
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__FLOP_TYPE_SCALAR_DOUBLE = 0x80, // Scalar double
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__FLOP_TYPE_PACKED_DOUBLE = 0xa0, // Packed double
		RETIRED_SSE_AVX_FLOPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_SSE_AVX_FLOPS__ANY = 0x0f, // Double precision add/subtract flops
		RETIRED_FP_OPS_BY_WIDTH = 0x8, // The number of retired floating-point ops by width
		RETIRED_FP_OPS_BY_WIDTH__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_WIDTH__X87_UOPS_RETIRED = 0x1, // X87 uops retired
		RETIRED_FP_OPS_BY_WIDTH__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_WIDTH__MMX_UOPS_RETIRED = 0x2, // MMX uops retired
		RETIRED_FP_OPS_BY_WIDTH__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_WIDTH__SCALAR_UOPS_RETIRED = 0x4, // Scalar uops retired
		RETIRED_FP_OPS_BY_WIDTH__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_WIDTH__PACK128_UOPS_RETIRED = 0x8, // Packed 128-bit uops retired
		RETIRED_FP_OPS_BY_WIDTH__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_WIDTH__PACK256_UOPS_RETIRED = 0x10, // Packed 256-bit uops retired
		RETIRED_FP_OPS_BY_WIDTH__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_WIDTH__PACK512_UOPS_RETIRED = 0x20, // Packed 512-bit uops retired
		RETIRED_FP_OPS_BY_TYPE = 0xa, // The number of retired floating-point ops by type
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_NONE = 0x0, // Do not count scalar ops
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_ADD = 0x01, // Number of scalar ADD ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_SUB = 0x02, // Number of scalar SUB ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_MUL = 0x03, // Number of scalar MUL ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_MAC = 0x04, // Number of scalar MAC ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_DIV = 0x05, // Number of scalar DIV ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_SQRT = 0x06, // Number of scalar SQRT ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_CMP = 0x07, // Number of scalar CMP ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_CVT = 0x08, // Number of scalar CVT ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_BLEND = 0x09, // Number of scalar BLEND ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_MOVE = 0x0a, // Number of scalar MOV ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_SHUFFLE = 0x0b, // Number of scalar SHUFFLE ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_BFLOAT = 0x0c, // Number of scalar BFloat ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_LOGICAL = 0x0d, // Number of scalar LOGICAL ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_OTHER = 0x0e, // Number of other scalar ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__SCALAR_ALL = 0x0f, // Number of any scalar ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_NONE = 0x0, // Do not count vector ops
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_ADD = 0x10, // Number of vector ADD ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_SUB = 0x20, // Number of vector SUB ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_MUL = 0x30, // Number of vector MUL ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_MAC = 0x40, // Number of vector MAC ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_DIV = 0x50, // Number of DIV ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_SQRT = 0x60, // Number of vector SQRT ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_CMP = 0x70, // Number of vector CMP ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_CVT = 0x80, // Number of vector CVT ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_BLEND = 0x90, // Number of vector BLEND ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_MOVE = 0xa0, // Number of vector MOV ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_SHUFFLE = 0xb0, // Number of vector SHUFFLE ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_BFLOAT = 0xc0, // Number of vector BFloat ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_LOGICAL = 0xd0, // Number of vector LOGICAL ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_OTHER = 0xe0, // Number of other vector ops retired
		RETIRED_FP_OPS_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_RETIRED_FP_OPS_BY_TYPE__VECTOR_ALL = 0xf0, // Number of scalar ADD and vector ALL ops retired
		RETIRED_INT_OPS = 0xb, // The number of retired integer ops (SSE/AVX)
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_NONE = 0x0, // Do count MMX ops
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_ADD = 0x1, // Number of MMX ADD ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_SUB = 0x2, // Number of MMX SUB ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_MUL = 0x3, // Number of MMX MUL ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_MAC = 0x4, // Number of MMX MAC ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_AES = 0x5, // Number of MMX AES ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_SHA = 0x6, // Number of MMX SHA ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_CMP = 0x7, // Number of MMX CMP ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_CVT = 0x8, // Number of MMX CVT or PACK ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_SHIFT = 0x9, // Number of MMX SHIFT ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_MOV = 0xa, // Number of MMX MOV ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_SHUFFLE = 0xb, // Number of MMX SHUFFLE ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_VNNI = 0xc, // Number of MMX VNNI ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_LOGICAL = 0xd, // Number of MMX LOGICAL ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_OTHER = 0xe, // Number of other MMX ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__MMX_ALL = 0xf, // Any MMX ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_NONE = 0x0, // Do not count SSE/AVX ops
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_ADD = 0x10, // Number of SSE/AVX ADD ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_SUB = 0x20, // Number of SSE/AVX SUB ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_MUL = 0x30, // Number of SSE/AVX MUL ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_MAC = 0x40, // Number of SSE/AVX MAC ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_AES = 0x50, // Number of SSE/AVX AES ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_SHA = 0x60, // Number of SSE/AVX SHA ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_CMP = 0x70, // Number of SSE/AVX CMP ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_CVT = 0x80, // Number of SSE/AVX CVT or PACK ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_SHIFT = 0x90, // Number of SSE/AVX SHIFT ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_MOV = 0xa0, // Number of SSE/AVX MOV ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_SHUFFLE = 0xb0, // Number of SSE/AVX SHUFFLE ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_VNNI = 0xc0, // Number of SSE/AVX VNNI ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_LOGICAL = 0xd0, // Number of SSE/AVX LOGICAL ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_OTHER = 0xe0, // Number of other SSE/AVX ops retired
		RETIRED_INT_OPS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_INT_OPS__SSE_AVX_ALL = 0xf0, // Any SSE/AVX ops retired
		PACKED_FP_OPS_RETIRED = 0xc, // The number of packed floating-point operations
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_NONE = 0x0, // Do not count any 128-bit ops
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_ADD = 0x01, // Number of floating-point 128-bit ADD ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_SUB = 0x02, // Number of floating-point 128-bit SUB ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_MUL = 0x03, // Number of floating-point 128-bit MUL ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_MAC = 0x04, // Number of floating-point 128-bit MAC ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_DIV = 0x05, // Number of floating-point 128-bit DIV ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_SQRT = 0x06, // Number of floating-point 128-bit SQRT ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_CMP = 0x07, // Number of floating-point 128-bit CMP ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_CVT = 0x08, // Number of floating-point 128-bit CVT ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_BLEND = 0x09, // Number of floating-point 128-bit 256-bit BLEND ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_MOV = 0x0a, // Number of floating-point 128-bit MOV ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_SHUFFLE = 0x0b, // Number of floating-point 128-bit SHUFFLE ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_BFLOAT = 0x0c, // Number of floating-point 128-bit BFloat ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_LOGICAL = 0x0d, // Number of floating-point 128-bit LOGICAL ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_OTHER = 0x0e, // Number of other floating-point 128-bit ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP128_ALL = 0x0f, // Number of any  floating-point 128-bit ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_NONE = 0x0, // Do not count any 256-bit ops
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_ADD = 0x10, // Number of floating-point 256-bit ADD ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_SUB = 0x20, // Number of floating-point 256-bit SUB ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_MUL = 0x30, // Number of floating-point 256-bit MUL ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_MAC = 0x40, // Number of floating-point 256-bit MAC ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_DIV = 0x50, // Number of floating-point 256-bit DIV ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_SQRT = 0x60, // Number of floating-point 256-bit SQRT ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_CMP = 0x70, // Number of floating-point 256-bit CMP ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_CVT = 0x80, // Number of floating-point 256-bit CVT ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_BLEND = 0x90, // Number of floating-point 256-bit BLEND ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_MOV = 0xa0, // Number of floating-point 256-bit MOV ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_SHUFFLE = 0xb0, // Number of floating-point 256-bit SHUFFLE ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_BFLOAT = 0xc0, // Number of floating-point 256-bit BFloat ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_LOGICAL = 0xd0, // Number of floating-point 256-bit LOGICAL ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_OTHER = 0xe0, // Number of other floating-point 256-bit ops retired
		PACKED_FP_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_FP_OPS_RETIRED__FP256_ALL = 0xf0, // Any floating-point 256-bit ops retired
		PACKED_INT_OPS_RETIRED = 0xd, // The number of packed integer operations
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_NONE = 0x0, // Do not count 128-bit ops
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_ADD = 0x01, // Number of integer 128-bit ADD ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_SUB = 0x02, // Number of integer 128-bit SUB ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_MUL = 0x03, // Number of integer 128-bit MUL ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_MAC = 0x04, // Number of integer 256-bit MAC ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_AES = 0x05, // Number of integer 128-bit AES ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_SHA = 0x06, // Number of integer 128-bit SHA ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_CMP = 0x07, // Number of integer 128-bit CMP ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_CVT = 0x08, // Number of integer 128-bit CVT or PACK ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_SHIFT = 0x09, // Number of integer 128-bit SHIFT ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_MOV = 0x0a, // Number of integer 128-bit MOV ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_SHUFFLE = 0x0b, // Number of integer 128-bit SHUFFLE ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_VNNI = 0x0c, // Number of integer 128-bit VNNI ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_LOGICAL = 0x0d, // Number of integer 128-bit LOGICAL ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_OTHER = 0x0e, // Number of other integer 128-bit ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT128_ALL = 0x0f, // Any integer 128-bit ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_NONE = 0x0, // Do not count 256-bit ops
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_ADD = 0x10, // Number of integer 256-bit ADD ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_SUB = 0x20, // Number of integer 256-bit SHIFT ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_MUL = 0x30, // Number of integer 256-bit MUL ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_MAC = 0x40, // Number of integer 256-bit MAC ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_AES = 0x50, // Number of integer 256-bit AES ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_SHA = 0x60, // Number of integer 256-bit SHA ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_CMP = 0x70, // Number of integer 256-bit CMP ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_CVT = 0x80, // Number of integer 256-bit CVT or PACK ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_SHIFT = 0x90, // Number of integer 256-bit SHIFT ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_MOV = 0xa0, // Number of integer 256-bit MOV ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_SHUFFLE = 0xb0, // Number of integer 256-bit SHUFFLE ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_VNNI = 0xc0, // Number of integer 256-bit VNNI ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_LOGICAL = 0xd0, // Number of integer 256-bit LOGICAL ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_OTHER = 0xe0, // Number of other integer 256-bit ops retired
		PACKED_INT_OPS_RETIRED__MASK__AMD64_FAM1AH_ZEN5_PACKED_INT_OPS_RETIRED__INT256_ALL = 0xf0, // Any integer 256-bit ops retired
		FP_DISPATCH_FAULTS = 0xe, // Floating-point dispatch faults
		FP_DISPATCH_FAULTS__MASK__AMD64_FAM1AH_ZEN5_FP_DISPATCH_FAULTS__X87_FILL_FAULT = 0x1, // x87 fill faults
		FP_DISPATCH_FAULTS__MASK__AMD64_FAM1AH_ZEN5_FP_DISPATCH_FAULTS__XMM_FILL_FAULT = 0x2, // XMM fill faults
		FP_DISPATCH_FAULTS__MASK__AMD64_FAM1AH_ZEN5_FP_DISPATCH_FAULTS__YMM_FILL_FAULT = 0x4, // YMM fill faults
		FP_DISPATCH_FAULTS__MASK__AMD64_FAM1AH_ZEN5_FP_DISPATCH_FAULTS__YMM_SPILL_FAULT = 0x8, // YMM spill faults
		FP_DISPATCH_FAULTS__MASK__AMD64_FAM1AH_ZEN5_FP_DISPATCH_FAULTS__ANY = 0xf, // Any FP dispatch faults
		BAD_STATUS_2 = 0x24, // TBD
		BAD_STATUS_2__MASK__AMD64_FAM1AH_ZEN5_BAD_STATUS_2__STLI_OTHER = 0x2, // Store-to-load conflicts. A load was unable to complete due to a non-forwardable conflict with an older store
		RETIRED_LOCK_INSTRUCTIONS = 0x25, // Counts the number of retired locked instructions
		RETIRED_LOCK_INSTRUCTIONS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_LOCK_INSTRUCTIONS__BUS_LOCK = 0x1, // Number of non-cacheable or cacheline-misaligned locks
		RETIRED_LOCK_INSTRUCTIONS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_LOCK_INSTRUCTIONS__ANY = 0x1f, // Number of all locks
		RETIRED_CLFLUSH_INSTRUCTIONS = 0x26, // Counts the number of retired non-speculative clflush instructions
		RETIRED_CPUID_INSTRUCTIONS = 0x27, // Counts the number of retired cpuid instructions
		LS_DISPATCH = 0x29, // Counts the number of operations dispatched to the LS unit. Unit Masks ADDed
		LS_DISPATCH__MASK__AMD64_FAM1AH_ZEN5_LS_DISPATCH__LD_ST_DISPATCH = 0x4, // Dispatched op that performs a load from and store to the same memory address
		LS_DISPATCH__MASK__AMD64_FAM1AH_ZEN5_LS_DISPATCH__STORE_DISPATCH = 0x2, // Store ops dispatched
		LS_DISPATCH__MASK__AMD64_FAM1AH_ZEN5_LS_DISPATCH__LD_DISPATCH = 0x1, // Load ops dispatched
		SMI_RECEIVED = 0x2b, // Counts the number system management interrupts (SMI) received
		INTERRUPT_TAKEN = 0x2c, // Counts the number of interrupts taken
		STORE_TO_LOAD_FORWARD = 0x35, // Number of STore to Load Forward hits
		STORE_GLOBALLY_VISIBLE_CANCELS_2 = 0x37, // Count reasons why a store coalescing buffer (SCB) commit is canceled
		STORE_GLOBALLY_VISIBLE_CANCELS_2__MASK__AMD64_FAM1AH_ZEN5_STORE_COMMIT_CANCELS_2__OLDER_ST_VISIBLE_CANCEL = 0x1, // Older SCB being waited on to become globally visible was unable to become globally visible
		MAB_ALLOCATION_BY_TYPE = 0x41, // Counts when a LS pipe allocates a MAB entry
		MAB_ALLOCATION_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_MAB_ALLOCATION_BY_TYPE__LS = 0x7, // Load store allocations
		MAB_ALLOCATION_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_MAB_ALLOCATION_BY_TYPE__HW_PF = 0x8, // Hardware prefetcher allocations
		MAB_ALLOCATION_BY_TYPE__MASK__AMD64_FAM1AH_ZEN5_MAB_ALLOCATION_BY_TYPE__ALL = 0xf, // All allocations
		DEMAND_DATA_CACHE_FILLS_FROM_SYSTEM = 0x43, // Demand Data Cache fills by data source
		DEMAND_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__LCL_L2 = 0x1, // Fill from local L2 to the core
		DEMAND_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__LOCAL_CCX = 0x2, // Fill from L3 or different L2 in same CCX
		DEMAND_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__NEAR_FAR_CACHE_NEAR = 0x4, // Fill from cache of different CCX in same node
		DEMAND_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__DRAM_IO_NEAR = 0x8, // Fill from DRAM or IO connected to same node
		DEMAND_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__NEAR_FAR_CACHE_FAR = 0x10, // Fill from CCX cache in different node
		DEMAND_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__DRAM_IO_FAR = 0x40, // Fill from DRAM or IO connected from a different node (same socket or remote)
		DEMAND_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__ALT_MEM_NEAR_FAR = 0x80, // Fill from Extension Memory
		ANY_DATA_CACHE_FILLS_FROM_SYSTEM = 0x44, // Any Data Cache fills by data source
		ANY_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__LCL_L2 = 0x1, // Fill from local L2 to the core
		ANY_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__LOCAL_CCX = 0x2, // Fill from L3 or different L2 in same CCX
		ANY_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__NEAR_FAR_CACHE_NEAR = 0x4, // Fill from cache of different CCX in same node
		ANY_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__DRAM_IO_NEAR = 0x8, // Fill from DRAM or IO connected to same node
		ANY_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__NEAR_FAR_CACHE_FAR = 0x10, // Fill from CCX cache in different node
		ANY_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__DRAM_IO_FAR = 0x40, // Fill from DRAM or IO connected from a different node (same socket or remote)
		ANY_DATA_CACHE_FILLS_FROM_SYSTEM__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__ALT_MEM_NEAR_FAR = 0x80, // Fill from Extension Memory
		L1_DTLB_MISS = 0x45, // L1 Data TLB misses
		L1_DTLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_DTLB_MISS__TLB_RELOAD_1G_L2_MISS = 0x80, // Data TLB reload to a 1GB page that missed in the L2 TLB
		L1_DTLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_DTLB_MISS__TLB_RELOAD_2M_L2_MISS = 0x40, // Data TLB reload to a 2MB page that missed in the L2 TLB
		L1_DTLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_DTLB_MISS__TLB_RELOAD_COALESCED_PAGE_MISS = 0x20, // Data TLB reload to a coalesced page that also missed in the L2 TLB
		L1_DTLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_DTLB_MISS__TLB_RELOAD_4K_L2_MISS = 0x10, // Data TLB reload to a 4KB page that missed in the L2 TLB
		L1_DTLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_DTLB_MISS__TLB_RELOAD_1G_L2_HIT = 0x8, // Data TLB reload to a 1GB page that hit in the L2 TLB
		L1_DTLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_DTLB_MISS__TLB_RELOAD_2M_L2_HIT = 0x4, // Data TLB reload to a 2MB page that hit in the L2 TLB
		L1_DTLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_DTLB_MISS__TLB_RELOAD_COALESCED_PAGE_HIT = 0x2, // Data TLB reload to a coalesced page that hit in the L2 TLB
		L1_DTLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_DTLB_MISS__TLB_RELOAD_4K_L2_HIT = 0x1, // Data TLB reload to a 4KB page that hit in the L2 TLB
		MISALIGNED_LOADS = 0x47, // Misaligned loads retired
		MISALIGNED_LOADS__MASK__AMD64_FAM1AH_ZEN5_MISALIGNED_LOADS__MA4K = 0x2, // The number of 4KB misaligned (page crossing) loads
		MISALIGNED_LOADS__MASK__AMD64_FAM1AH_ZEN5_MISALIGNED_LOADS__MA64 = 0x1, // The number of 64B misaligned (cacheline crossing) loads
		PREFETCH_INSTRUCTIONS_DISPATCHED = 0x4b, // Software Prefetch Instructions Dispatched. This is a speculative event
		PREFETCH_INSTRUCTIONS_DISPATCHED__MASK__AMD64_FAM1AH_ZEN5_PREFETCH_INSTRUCTIONS_DISPATCHED__PREFETCH_T0_T1_T2 = 0x1, // Number of prefetcht0
		PREFETCH_INSTRUCTIONS_DISPATCHED__MASK__AMD64_FAM1AH_ZEN5_PREFETCH_INSTRUCTIONS_DISPATCHED__PREFETCHW = 0x2, // Number of prefetchtw instructions dispatched
		PREFETCH_INSTRUCTIONS_DISPATCHED__MASK__AMD64_FAM1AH_ZEN5_PREFETCH_INSTRUCTIONS_DISPATCHED__PREFETCHNTA = 0x4, // Number of prefetchtnta instructions dispatched
		PREFETCH_INSTRUCTIONS_DISPATCHED__MASK__AMD64_FAM1AH_ZEN5_PREFETCH_INSTRUCTIONS_DISPATCHED__ANY = 0x7, // Any prefetch
		WRITE_COMBINING_BUFFER_CLOSE = 0x50, // Counts events that cause a Write Combining Buffer (WCB) entry to close
		WRITE_COMBINING_BUFFER_CLOSE__MASK__AMD64_FAM1AH_ZEN5_WCB_CLOSE__FULL_LINE_64B = 0x1, // All 64 bytes of the WCB entry have been written
		INEFFECTIVE_SOFTWARE_PREFETCH = 0x52, // Number of software prefetches that did not fetch data outside of the processor core
		INEFFECTIVE_SOFTWARE_PREFETCH__MASK__AMD64_FAM1AH_ZEN5_INEFFECTIVE_SOFTWARE_PREFETCH__MAB_MCH_CNT = 0x2, // Software prefetch instructions saw a match on an already allocated miss request buffer
		INEFFECTIVE_SOFTWARE_PREFETCH__MASK__AMD64_FAM1AH_ZEN5_INEFFECTIVE_SOFTWARE_PREFETCH__DATA_PIPE_SW_PF_DC_HIT = 0x1, // Software Prefetch instruction saw a DC hit
		SOFTWARE_PREFETCH_DATA_CACHE_FILLS = 0x59, // Number of software prefetches fills by data source
		SOFTWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__LCL_L2 = 0x1, // Fill from local L2 to the core
		SOFTWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__LOCAL_CCX = 0x2, // Fill from L3 or different L2 in same CCX
		SOFTWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__NEAR_FAR_CACHE_NEAR = 0x4, // Fill from cache of different CCX in same node
		SOFTWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__DRAM_IO_NEAR = 0x8, // Fill from DRAM or IO connected to same node
		SOFTWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__NEAR_FAR_CACHE_FAR = 0x10, // Fill from CCX cache in different node
		SOFTWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__DRAM_IO_FAR = 0x40, // Fill from DRAM or IO connected from a different node (same socket or remote)
		SOFTWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__ALT_MEM_NEAR_FAR = 0x80, // Fill from Extension Memory
		HARDWARE_PREFETCH_DATA_CACHE_FILLS = 0x5a, // Number of hardware prefetches fills by data source
		HARDWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__LCL_L2 = 0x1, // Fill from local L2 to the core
		HARDWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__LOCAL_CCX = 0x2, // Fill from L3 or different L2 in same CCX
		HARDWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__NEAR_FAR_CACHE_NEAR = 0x4, // Fill from cache of different CCX in same node
		HARDWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__DRAM_IO_NEAR = 0x8, // Fill from DRAM or IO connected to same node
		HARDWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__NEAR_FAR_CACHE_FAR = 0x10, // Fill from CCX cache in different node
		HARDWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__DRAM_IO_FAR = 0x40, // Fill from DRAM or IO connected from a different node (same socket or remote)
		HARDWARE_PREFETCH_DATA_CACHE_FILLS__MASK__AMD64_FAM1AH_ZEN5_DEMAND_DATA_FILLS_FROM_SYSTEM__ALT_MEM_NEAR_FAR = 0x80, // Fill from Extension Memory
		ALLOC_MAB_COUNT = 0x5f, // Counts the in-flight L1 data cache misses each cycle
		CYCLES_NOT_IN_HALT = 0x76, // Number of core cycles not in halted state
		TLB_FLUSHES = 0x78, // Number of TLB flushes
		P0_FREQ_CYCLES_NOT_IN_HALT = 0x120, // Number of core cycles not in halted state by P-level
		INSTRUCTION_CACHE_REFILLS_FROM_L2 = 0x82, // Number of 64-byte instruction cachelines that was fulfilled by the L2 cache
		INSTRUCTION_CACHE_REFILLS_FROM_SYSTEM = 0x83, // Number of 64-byte instruction cachelines fulfilled from system memory or another cache
		L1_ITLB_MISS_L2_ITLB_HIT = 0x84, // Number of instruction fetches that miss in the L1 ITLB but hit in the L2 ITLB
		L1_ITLB_MISS_L2_ITLB_MISS = 0x85, // The number of valid fills into the ITLB originating from the LS Page-Table Walker. Tablewalk requests are issued for L1-ITLB and L2-ITLB misses
		L1_ITLB_MISS_L2_ITLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_ITLB_MISS_L2_ITLB_MISS__TLB_FLUSHES = 0xff, // All TLB Flushes
		L1_ITLB_MISS_L2_ITLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_ITLB_MISS_L2_ITLB_MISS__IF1G = 0x4, // Number of instruction fetches to a 1GB page
		L1_ITLB_MISS_L2_ITLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_ITLB_MISS_L2_ITLB_MISS__IF2M = 0x2, // Number of instruction fetches to a 2MB page
		L1_ITLB_MISS_L2_ITLB_MISS__MASK__AMD64_FAM1AH_ZEN5_L1_ITLB_MISS_L2_ITLB_MISS__IF4K = 0x1, // Number of instruction fetches to a 4KB page
		BP_CORRECTION = 0x8b, // Number of times the Branch Predictor (BP) flushed its own pipeline due to internal conditions such as a second level prediction structure. Does not count the number of bubbles caused by these internal flushes
		DYNAMIC_INDIRECT_PREDICTIONS = 0x8e, // Number of times a branch used the indirect predictor to make a prediction
		DECODER_OVERRIDE_BRANCH_PRED = 0x91, // Number of decoder overrides of existing branch prediction
		L1_ITLB_FETCH_HIT = 0x94, // Instruction fetches that hit in the L1 ITLB
		L1_ITLB_FETCH_HIT__MASK__AMD64_FAM1AH_ZEN5_ITLB_FETCH_HIT__IF1G = 0x4, // L1 instruction fetch TLB hit a 1GB page size
		L1_ITLB_FETCH_HIT__MASK__AMD64_FAM1AH_ZEN5_ITLB_FETCH_HIT__IF2M = 0x2, // L1 instruction fetch TLB hit a 2MB page size
		L1_ITLB_FETCH_HIT__MASK__AMD64_FAM1AH_ZEN5_ITLB_FETCH_HIT__IF4K = 0x1, // L1 instruction fetch TLB hit a 4KB or 16KB page size
		BP_REDIRECTS = 0x9f, // Counts redirects of the branch predictor
		BP_REDIRECTS__MASK__AMD64_FAM1AH_ZEN5_BP_REDIRECTS__EX_REDIR = 0x2, // Mispredict redirect from EX (execution-time)
		BP_REDIRECTS__MASK__AMD64_FAM1AH_ZEN5_BP_REDIRECTS__RESYNC = 0x1, // Resync redirect from RT (retire-time)
		FETCH_IBS_EVENTS = 0x188, // Counts significant Fetch Instruction Based Sampling (IBS) state transitions
		FETCH_IBS_EVENTS__MASK__AMD64_FAM1AH_ZEN5_FETCH_IBS_EVENTS__SAMPLE_VAL = 0x10, // Counts the number of valid fetch IBS samples that were collected. Each valid sample also created an IBS interrupt
		FETCH_IBS_EVENTS__MASK__AMD64_FAM1AH_ZEN5_FETCH_IBS_EVENTS__SAMPLE_FILTERED = 0x8, // Counts the number of fetch IBS tagged fetches that were discarded due to IBS filtering. When a tagged fetch is discarded the fetch IBS facility will automatically tag a new fetch
		FETCH_IBS_EVENTS__MASK__AMD64_FAM1AH_ZEN5_FETCH_IBS_EVENTS__SAMPLE_DISCARDED = 0x4, // Counts when the fetch IBS facility discards an IBS tagged fetch for reasons other than IBS filtering. When a tagged fetch is discarded the fetch IBS facility will automatically tag a new fetch
		FETCH_IBS_EVENTS__MASK__AMD64_FAM1AH_ZEN5_FETCH_IBS_EVENTS__FETCH_TAGGED = 0x2, // Counts the number of fetches tagged for fetch IBS. Not all tagged fetches create an IBS interrupt and valid fetch sample
		IC_TAG_HIT_MISS = 0x18e, // Counts various IC tag related hit and miss events
		IC_TAG_HIT_MISS__MASK__AMD64_FAM1AH_ZEN5_IC_TAG_HIT_MISS__IC_HIT = 0x7, // Instruction cache hit
		IC_TAG_HIT_MISS__MASK__AMD64_FAM1AH_ZEN5_IC_TAG_HIT_MISS__IC_MISS = 0x18, // Instruction cache miss
		IC_TAG_HIT_MISS__MASK__AMD64_FAM1AH_ZEN5_IC_TAG_HIT_MISS__ALL_IC_ACCESS = 0x1f, // All instruction cache accesses
		OP_CACHE_HIT_MISS = 0x28f, // Counts op cache micro-tag hit/miss events
		OP_CACHE_HIT_MISS__MASK__AMD64_FAM1AH_ZEN5_OP_CACHE_HIT_MISS__OC_HIT = 0x3, // Op cache hit
		OP_CACHE_HIT_MISS__MASK__AMD64_FAM1AH_ZEN5_OP_CACHE_HIT_MISS__OC_MISS = 0x4, // Op cache miss
		OP_CACHE_HIT_MISS__MASK__AMD64_FAM1AH_ZEN5_OP_CACHE_HIT_MISS__ALL_OC_ACCESS = 0x7, // All op cache accesses
		OPS_QUEUE_EMPTY = 0xa9, // Number of cycles where the op queue is empty
		OPS_SOURCE_DISPATCHED_FROM_DECODER = 0xaa, // Number of ops dispatched from the decoder classified by op source
		OPS_SOURCE_DISPATCHED_FROM_DECODER__MASK__AMD64_FAM1AH_ZEN5_OPS_SOURCE_DISPATCHED_FROM_DECODER__DECODER = 0x1, // Number of ops dispatched from x86 decoder
		OPS_SOURCE_DISPATCHED_FROM_DECODER__MASK__AMD64_FAM1AH_ZEN5_OPS_SOURCE_DISPATCHED_FROM_DECODER__OPCACHE = 0x2, // Number of ops dispatched from Op Cache
		OPS_TYPE_DISPATCHED_FROM_DECODER = 0xab, // Number of ops dispatched from the decoder classified by op type
		OPS_TYPE_DISPATCHED_FROM_DECODER__MASK__AMD64_FAM1AH_ZEN5_OPS_TYPE_DISPATCHED_FROM_DECODER__FP_DISPATCH = 0x04, // Any FP dispatch
		OPS_TYPE_DISPATCHED_FROM_DECODER__MASK__AMD64_FAM1AH_ZEN5_OPS_TYPE_DISPATCHED_FROM_DECODER__INTEGER_DISPATCH = 0x08, // Any Integer dispatch
		DISPATCH_RESOURCE_STALL_CYCLES_1 = 0xae, // Number of cycles where a dispatch group is valid but does not get dispatched due to a Token Stall
		DISPATCH_RESOURCE_STALL_CYCLES_1__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_1__INT_PHY_REG_FILE_RSRC_STALL = 0x1, // Number of cycles stalled due to integer physical register file resource stalls
		DISPATCH_RESOURCE_STALL_CYCLES_1__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_1__LOAD_QUEUE_RSRC_STALL = 0x2, // Number of cycles stalled due to load queue resource stalls
		DISPATCH_RESOURCE_STALL_CYCLES_1__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_1__STORE_QUEUE_RSRC_STALL = 0x4, // Number of cycles stalled due to store queue resource stalls
		DISPATCH_RESOURCE_STALL_CYCLES_1__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_1__TAKEN_BRANCH_BUFFER_RSRC_STALL = 0x10, // Number of cycles stalled due to taken branch buffer resource stalls
		DISPATCH_RESOURCE_STALL_CYCLES_1__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_1__FP_SCHEDULER_RSRC_STALL = 0x40, // Number of cycles stalled due to floating-point scheduler resource stalls
		DISPATCH_RESOURCE_STALL_CYCLES_2 = 0xaf, // Number of cycles where a dispatch group is valid but does not get dispatched due to a Token Stall
		DISPATCH_RESOURCE_STALL_CYCLES_2__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_2__AL_TOKEN_STALL = 0x1, // Number of cycles stalled due to insufficient tokens available for ALU
		DISPATCH_RESOURCE_STALL_CYCLES_2__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_2__AG_TOKEN_STALL = 0x2, // Number of cycles stalled due to insufficient tokens available for Agen
		DISPATCH_RESOURCE_STALL_CYCLES_2__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_2__EX_FLUSH_STALL = 0x4, // Number of cycles stalled due to integer execution flush recovery pending
		DISPATCH_RESOURCE_STALL_CYCLES_2__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_RESOURCE_STALL_CYCLES_2__RETIRE_TOKEN_STALL = 0x20, // Number of cycles stalled due to insufficient tokens available for Retire Queue
		DISPATCH_STALLS_1 = 0x1a0, // For each cycle
		DISPATCH_STALLS_1__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_STALLS_1__FE_NO_OPS = 0x01, // Counts dispatch slots left empty because the front-end did not supply ops
		DISPATCH_STALLS_1__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_STALLS_1__BE_STALLS = 0x1e, // Counts ops unable to dispatch due to back-end stalls
		DISPATCH_STALLS_2 = 0x1a2, // For each cycle
		DISPATCH_STALLS_2__MASK__AMD64_FAM1AH_ZEN5_DISPATCH_STALLS_2__SMT_CONTENTION = 0x60, // Counts ops unable to dispatch because the dispatch cycle was granted to the other SMT thread
		RETIRED_INSTRUCTIONS = 0xc0, // Number of instructions retired
		RETIRED_OPS = 0xc1, // Number of macro-ops retired
		RETIRED_BRANCH_INSTRUCTIONS = 0xc2, // Number of branch instructions retired. This includes all types of architectural control flow changes
		RETIRED_BRANCH_INSTRUCTIONS_MISPREDICTED = 0xc3, // Number of retired branch instructions
		RETIRED_TAKEN_BRANCH_INSTRUCTIONS = 0xc4, // Number of taken branches that were retired. This includes all types of architectural control flow changes
		RETIRED_TAKEN_BRANCH_INSTRUCTIONS_MISPREDICTED = 0xc5, // Number of retired taken branch instructions that were mispredicted
		RETIRED_FAR_CONTROL_TRANSFERS = 0xc6, // Number of far control transfers retired including far call/jump/return
		RETIRED_NEAR_RETURNS = 0xc8, // Number of near return instructions (RET or RET Iw) retired
		RETIRED_NEAR_RETURNS_MISPREDICTED = 0xc9, // Number of near returns retired that were not correctly predicted by the return address predictor. Each such mispredict incurs the same penalty as a mispredicted conditional branch instruction. Only EX mispredicts are counted
		RETIRED_INDIRECT_BRANCH_INSTRUCTIONS_MISPREDICTED = 0xca, // Number of indirect branches retired there were not correctly predicted. Each such mispredict incurs the same penalty as a mispredicted condition branch instruction. Only EX mispredicts are counted
		RETIRED_MMX_FP_INSTRUCTIONS = 0xcb, // Number of MMX
		RETIRED_MMX_FP_INSTRUCTIONS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_MMX_FP_INSTRUCTIONS__SSE_INSTR = 0x4, // Number of SSE instructions (SSE
		RETIRED_MMX_FP_INSTRUCTIONS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_MMX_FP_INSTRUCTIONS__MMX_INSTR = 0x2, // Number of MMX instructions
		RETIRED_MMX_FP_INSTRUCTIONS__MASK__AMD64_FAM1AH_ZEN5_RETIRED_MMX_FP_INSTRUCTIONS__X87_INSTR = 0x1, // Number of x87 instructions
		RETIRED_INDIRECT_BRANCH_INSTRUCTIONS = 0xcc, // Number of indirect branches retired
		RETIRED_CONDITIONAL_BRANCH_INSTRUCTIONS = 0xd1, // Number of retired conditional branch instructions
		DIV_CYCLES_BUSY_COUNT = 0xd3, // Number of cycles when the divider is busy
		DIV_OP_COUNT = 0xd4, // Number of divide ops
		CYCLES_NO_RETIRE = 0xd6, // Counts cycles when the hardware does not retire any ops for a given reason. Event can only track one reason at a time. If multiple reasons apply for a given cycle
		CYCLES_NO_RETIRE__MASK__AMD64_FAM1AH_ZEN5_CYCLES_NO_RETIRE__EMPTY = 0x1, // Number of cycles when there were no valid ops in the retire queue. This may be caused by front-end bottlenecks or pipeline redirects
		CYCLES_NO_RETIRE__MASK__AMD64_FAM1AH_ZEN5_CYCLES_NO_RETIRE__NOT_COMPLETE_LOAD_AND_ALU = 0x2, // Number of cycles when the oldest retire slot did not have its completion bits set
		CYCLES_NO_RETIRE__MASK__AMD64_FAM1AH_ZEN5_CYCLES_NO_RETIRE__OTHER = 0x8, // Number of cycles where ops could have retired but were stopped from retirement for other reasons: retire breaks
		CYCLES_NO_RETIRE__MASK__AMD64_FAM1AH_ZEN5_CYCLES_NO_RETIRE__THREAD_NOT_SELECTED = 0x10, // Number of cycles where ops could have retired but did not because thread arbitration did not select the thread for retire
		RETIRED_UCODE_INSTRUCTIONS = 0x1c1, // Number of microcode instructions retired
		RETIRED_UCODE_OPS = 0x1c2, // Number of microcode ops retired
		RETIRED_BRANCH_MISPREDICTED_DIRECTION_MISMATCH = 0x1c7, // Number of retired conditional branch instructions that were not correctly predicted because of branch direction mismatch
		RETIRED_UNCONDITIONAL_INDIRECT_BRANCH_INSTRUCTIONS_MISPREDICTED = 0x1c8, // Number of retired unconditional indirect branch instructions that were mispredicted
		RETIRED_UNCONDITIONAL_BRANCH_INSTRUCTIONS = 0x1c9, // Number of retired unconditional branch instructions
		TAGGED_IBS_OPS = 0x1cf, // Counts Op IBS related events
		TAGGED_IBS_OPS__MASK__AMD64_FAM1AH_ZEN5_TAGGED_IBS_OPS__IBS_COUNT_ROLLOVER = 0x4, // Number of times a op could not be tagged by IBS because of a previous tagged op that has not yet signaled interrupt
		TAGGED_IBS_OPS__MASK__AMD64_FAM1AH_ZEN5_TAGGED_IBS_OPS__IBS_TAGGED_OPS_RET = 0x2, // Number of ops tagged by IBS that retired
		TAGGED_IBS_OPS__MASK__AMD64_FAM1AH_ZEN5_TAGGED_IBS_OPS__IBS_TAGGED_OPS = 0x1, // Number of ops tagged by IBS
		RETIRED_FUSED_INSTRUCTIONS = 0x1d0, // Counts retired fused instructions
		REQUESTS_TO_L2_GROUP1 = 0x60, // All L2 cache requests
		REQUESTS_TO_L2_GROUP1__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP1__RD_BLK_L = 0x80, // Number of data cache reads (including software and hardware prefetches)
		REQUESTS_TO_L2_GROUP1__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP1__RD_BLK_X = 0x40, // Number of data cache stores
		REQUESTS_TO_L2_GROUP1__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP1__LS_RD_BLK_C_S = 0x20, // Number of data cache shared reads
		REQUESTS_TO_L2_GROUP1__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP1__CACHEABLE_IC_READ = 0x10, // Number of instruction cache reads
		REQUESTS_TO_L2_GROUP1__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP1__PREFETCH_L2_CMD = 0x4, // TBD
		REQUESTS_TO_L2_GROUP1__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP1__L2_HW_PF = 0x2, // Number of prefetches accepted by L2 pipeline
		REQUESTS_TO_L2_GROUP1__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP1__MISC = 0x1, // Count various non-cacheable requests: non-cached data read
		REQUESTS_TO_L2_GROUP2 = 0x61, // All L2 cache requests (rare cases)
		REQUESTS_TO_L2_GROUP2__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP2__LS_RD_SIZED = 0x40, // LS sized read
		REQUESTS_TO_L2_GROUP2__MASK__AMD64_FAM1AH_ZEN5_REQUESTS_TO_L2_GROUP2__LS_RD_SIZED_NC = 0x20, // LS sized read
		LS_TO_L2_WBC_REQUESTS = 0x63, // Number of write combining buffer (WCB) operations
		LS_TO_L2_WBC_REQUESTS__MASK__AMD64_FAM1AH_ZEN5_LS_TO_L2_WBC_REQUESTS__WCB_CLOSE = 0x20, // Write combining buffer close
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS = 0x64, // L2 cache request outcomes. This event does not count accesses to the L2 cache by the L2 prefetcher
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__MASK__AMD64_FAM1AH_ZEN5_CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__LS_RD_BLK_C_S = 0x80, // Number of data cache shared read hitting in the L2
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__MASK__AMD64_FAM1AH_ZEN5_CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__LS_RD_BLK_L_HIT_X = 0x40, // Number of data cache reads hitting in the L2
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__MASK__AMD64_FAM1AH_ZEN5_CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__LS_RD_BLK_L_HIT_S = 0x20, // Number of data cache reads hitting a non-modifiable line in the L2
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__MASK__AMD64_FAM1AH_ZEN5_CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__LS_RD_BLK_X = 0x10, // Number of data cache store requests hitting in the L2
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__MASK__AMD64_FAM1AH_ZEN5_CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__LS_RD_BLK_C = 0x8, // Number of data cache requests missing in the L2
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__MASK__AMD64_FAM1AH_ZEN5_CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__IC_FILL_HIT_X = 0x4, // Number of instruction cache fill requests hitting a modifiable line in the L2
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__MASK__AMD64_FAM1AH_ZEN5_CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__IC_FILL_HIT_S = 0x2, // Number of instruction cache fill requests hitting a non-modifiable line in the L2
		CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__MASK__AMD64_FAM1AH_ZEN5_CORE_TO_L2_CACHEABLE_REQUEST_ACCESS_STATUS__IC_FILL_MISS = 0x1, // Number of instruction cache fill requests missing in the L2
		L2_PREFETCH_HIT_L2 = 0x70, // Number of L2 prefetches that hit in the L2
		L2_PREFETCH_HIT_L2__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L2_HW_PF = 0x1f, // Counts requests generated from L2 hardware prefetchers
		L2_PREFETCH_HIT_L2__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L1_DC_HW_PF = 0xe0, // Counts requests generated from L1 DC hardware prefetchers
		L2_PREFETCH_HIT_L2__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L1_DC_L2_HW_PF = 0xff, // Counts requests generated from L1 DC and L2 hardware prefetchers
		L2_PREFETCH_HIT_L3 = 0x71, // Number of L2 prefetches accepted by the L2 pipeline which miss the L2 cache and hit the L3
		L2_PREFETCH_HIT_L3__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L2_HW_PF = 0x1f, // Counts requests generated from L2 hardware prefetchers
		L2_PREFETCH_HIT_L3__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L1_DC_HW_PF = 0xe0, // Counts requests generated from L1 DC hardware prefetchers
		L2_PREFETCH_HIT_L3__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L1_DC_L2_HW_PF = 0xff, // Counts requests generated from L1 DC and L2 hardware prefetchers
		L2_FILL_RESPONSE_SRC = 0x72, // Number of L2 prefetches accepted by the L2 pipeline which miss the L2 and the L3 caches
		L2_FILL_RESPONSE_SRC__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L2_HW_PF = 0x1f, // Counts requests generated from L2 hardware prefetchers
		L2_FILL_RESPONSE_SRC__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L1_DC_HW_PF = 0xe0, // Counts requests generated from L1 DC hardware prefetchers
		L2_FILL_RESPONSE_SRC__MASK__AMD64_FAM1AH_ZEN5_L2_PREFETCH_HIT_L2__L1_DC_L2_HW_PF = 0xff, // Counts requests generated from L1 DC and L2 hardware prefetchers
		L2_PREFETCH_MISS_L3 = 0x165, // Number of L2 prefetches accepted by the L2 pipeline which miss the L2 and the L3 caches
		L2_PREFETCH_MISS_L3__MASK__AMD64_FAM1AH_ZEN5_L2_FILL_RESP_SRC__LOCAL_CCX = 0x2, // Fill from L3 or different L2 in same CCX
		L2_PREFETCH_MISS_L3__MASK__AMD64_FAM1AH_ZEN5_L2_FILL_RESP_SRC__NEAR_FAR_CACHE_NEAR = 0x4, // Fill from cache of different CCX in same node
		L2_PREFETCH_MISS_L3__MASK__AMD64_FAM1AH_ZEN5_L2_FILL_RESP_SRC__DRAM_IO_NEAR = 0x8, // Fill from DRAM or IO connected to same node
		L2_PREFETCH_MISS_L3__MASK__AMD64_FAM1AH_ZEN5_L2_FILL_RESP_SRC__NEAR_FAR_CACHE_FAR = 0x10, // Fill from CCX cache in different node
		L2_PREFETCH_MISS_L3__MASK__AMD64_FAM1AH_ZEN5_L2_FILL_RESP_SRC__DRAM_IO_FAR = 0x40, // Fill from DRAM or IO connected from a different node (same socket or remote)
		L2_PREFETCH_MISS_L3__MASK__AMD64_FAM1AH_ZEN5_L2_FILL_RESP_SRC__ALT_MEM_NEAR_FAR = 0x80, // Fill from Extension Memory
		
	};
};

namespace fam1ah_zen5 = optkit::amd64::fam1ah_zen5;

