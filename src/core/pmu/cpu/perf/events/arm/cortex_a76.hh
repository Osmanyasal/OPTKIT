#pragma once
#include <cstdint>
namespace optkit::arm::cortex_a76{
	enum cortex_a76 : uint64_t {
		SW_INCR = 0x00, // Software increment
		L1I_CACHE_REFILL = 0x01, // L1 instruction cache refill
		L1I_TLB_REFILL = 0x02, // L1 instruction TLB refill
		L1D_CACHE_REFILL = 0x03, // L1 data cache refill
		L1D_CACHE = 0x04, // L1 data cache access
		L1D_TLB_REFILL = 0x05, // L1 data TLB refill
		INST_RETIRED = 0x08, // Instruction architecturally executed
		EXC_TAKEN = 0x09, // Exception taken
		EXC_RETURN = 0x0a, // Instruction architecturally executed
		CID_WRITE_RETIRED = 0x0b, // Instruction architecturally executed
		BR_MIS_PRED = 0x10, // Mispredicted or not predicted branch speculatively executed
		CPU_CYCLES = 0x11, // Cycle
		BR_PRED = 0x12, // Predictable branch speculatively executed
		MEM_ACCESS = 0x13, // Data memory access
		L1I_CACHE = 0x14, // Level 1 instruction cache access or Level 0 Macro-op cache access
		L1D_CACHE_WB = 0x15, // L1 data cache Write-Back
		L2D_CACHE = 0x16, // L2 unified cache access
		L2D_CACHE_REFILL = 0x17, // L2 unified cache refill
		L2D_CACHE_WB = 0x18, // L2 unified cache write-back
		BUS_ACCESS = 0x19, // Bus access
		MEMORY_ERROR = 0x1a, // Local memory error
		INST_SPEC = 0x1b, // Operation speculatively executed
		TTBR_WRITE_RETIRED = 0x1c, // Instruction architecturally executed
		BUS_CYCLES = 0x1d, // Bus cycles
		L2D_CACHE_ALLOCATE = 0x20, // L2 unified cache allocation without refill
		BR_RETIRED = 0x21, // Instruction architecturally executed
		BR_MIS_PRED_RETIRED = 0x22, // Instruction architecturally executed
		STALL_FRONTEND = 0x23, // No operation issued because of the frontend
		STALL_BACKEND = 0x24, // No operation issued because of the backend
		L1D_TLB = 0x25, // Level 1 data TLB access
		L1I_TLB = 0x26, // Level 1 instruction TLB access
		L3D_CACHE_ALLOCATE = 0x29, // Attributable L3 data or unified cache allocation without refill
		L3D_CACHE_REFILL = 0x2a, // Attributable Level 3 unified cache refill
		L3D_CACHE = 0x2b, // Attributable Level 3 unified cache access
		L2D_TLB_REFILL = 0x2d, // Attributable L2 data or unified TLB refill
		L2D_TLB = 0x2f, // Attributable L2 data or unified TLB access
		REMOTE_ACCESS = 0x31, // Access to another socket in a multi-socket system
		DTLB_WALK = 0x34, // Access to data TLB that caused a page table walk
		ITLB_WALK = 0x35, // Access to instruction TLB that caused a page table walk
		LL_CACHE_RD = 0x36, // Last level cache access
		LL_CACHE_MISS_RD = 0x37, // Last level cache miss
		L1D_CACHE_RD = 0x40, // L1 data cache access
		L1D_CACHE_WR = 0x41, // L1 data cache access
		L1D_CACHE_REFILL_RD = 0x42, // L1 data cache refill
		L1D_CACHE_REFILL_WR = 0x43, // L1 data cache refill
		L1D_CACHE_REFILL_INNER = 0x44, // L1 data cache refill
		L1D_CACHE_REFILL_OUTER = 0x45, // L1 data cache refill
		L1D_CACHE_WB_VICTIM = 0x46, // L1 data cache write-back
		L1D_CACHE_WB_CLEAN = 0x47, // L1 data cache write-back cleaning and coherency
		L1D_CACHE_INVAL = 0x48, // L1 data cache invalidate
		L1D_TLB_REFILL_RD = 0x4c, // L1 data TLB refill
		L1D_TLB_REFILL_WR = 0x4d, // L1 data TLB refill
		L1D_TLB_RD = 0x4e, // L1 data TLB access
		L1D_TLB_WR = 0x4f, // L1 data TLB access
		L2D_CACHE_RD = 0x50, // L2 unified cache access
		L2D_CACHE_WR = 0x51, // L2 unified cache access
		L2D_CACHE_REFILL_RD = 0x52, // L2 unified cache refill
		L2D_CACHE_REFILL_WR = 0x53, // L2 unified cache refill
		L2D_CACHE_WB_VICTIM = 0x56, // L2 unified cache write-back
		L2D_CACHE_WB_CLEAN = 0x57, // L2 unified cache write-back
		L2D_CACHE_INVAL = 0x58, // L2 unified cache invalidate
		L2D_TLB_REFILL_RD = 0x5c, // L2 data or unified TLB refill
		L2D_TLB_REFILL_WR = 0x5d, // L2 data or unified TLB refill
		L2D_TLB_RD = 0x5e, // L2 data or unified TLB access
		L2D_TLB_WR = 0x5f, // L2 data or unified TLB access
		BUS_ACCESS_RD = 0x60, // Bus access read
		BUS_ACCESS_WR = 0x61, // Bus access write
		MEM_ACCESS_RD = 0x66, // Data memory access
		MEM_ACCESS_WR = 0x67, // Data memory access
		UNALIGNED_LD_SPEC = 0x68, // Unaligned access
		UNALIGNED_ST_SPEC = 0x69, // Unaligned access
		UNALIGNED_LDST_SPEC = 0x6a, // Unaligned access Event mnemonic Event description
		LDREX_SPEC = 0x6c, // Exclusive operation speculatively executed
		STREX_PASS_SPEC = 0x6d, // Exclusive operation speculatively executed
		STREX_FAIL_SPEC = 0x6e, // Exclusive operation speculatively executed
		STREX_SPEC = 0x6f, // Exclusive operation speculatively executed
		LD_SPEC = 0x70, // Operation speculatively executed
		ST_SPEC = 0x71, // Operation speculatively executed
		LDST_SPEC = 0x72, // Operation speculatively executed
		DP_SPEC = 0x73, // Operation speculatively executed
		ASE_SPEC = 0x74, // Operation speculatively executed
		VFP_SPEC = 0x75, // Operation speculatively executed
		PC_WRITE_SPEC = 0x76, // Operation speculatively executed
		CRYPTO_SPEC = 0x77, // Operation speculatively executed
		BR_IMMED_SPEC = 0x78, // Branch speculatively executed
		BR_RETURN_SPEC = 0x79, // Branch speculatively executed
		BR_INDIRECT_SPEC = 0x7a, // Branch speculatively executed
		ISB_SPEC = 0x7c, // Barrier speculatively executed
		DSB_SPEC = 0x7d, // Barrier speculatively executed
		DMB_SPEC = 0x7e, // Barrier speculatively executed
		EXC_UNDEF = 0x81, // Counts the number of undefined exceptions taken locally
		EXC_SVC = 0x82, // Exception taken locally
		EXC_PABORT = 0x83, // Exception taken locally
		EXC_DABORT = 0x84, // Exception taken locally
		EXC_IRQ = 0x86, // Exception taken locally
		EXC_FIQ = 0x87, // Exception taken locally
		EXC_SMC = 0x88, // Exception taken locally
		EXC_HVC = 0x8a, // Exception taken locally
		EXC_TRAP_PABORT = 0x8b, // Exception taken
		EXC_TRAP_DABORT = 0x8c, // Exception taken
		EXC_TRAP_OTHER = 0x8d, // Exception taken
		EXC_TRAP_IRQ = 0x8e, // Exception taken
		EXC_TRAP_FIQ = 0x8f, // Exception taken
		RC_LD_SPEC = 0x90, // Release consistency operation speculatively executed
		RC_ST_SPEC = 0x91, // Release consistency operation speculatively executed
		L3D_CACHE_RD = 0xa0, // L3 cache read
		L3_CACHE_RD = 0xa0, // L3 cache read
		
	};
};

namespace cortex_a76 = optkit::arm::cortex_a76;

